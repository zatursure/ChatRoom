// Êó•ÂøóÁ∫ßÂà´Êûö‰∏æ
const LogLevel = {
    ERROR: 0,   // ÈîôËØØ
    WARN: 1,    // Ë≠¶Âëä
    INFO: 2,    // ÈáçË¶Å‰ø°ÊÅØ
    DEBUG: 3    // Ë∞ÉËØï‰ø°ÊÅØ
};

const currentLogLevel = LogLevel.INFO;

// ‰ºòÂåñÂêéÁöÑÊó•ÂøóÂáΩÊï∞
function chatLog(level, type, message, data = null) {
    if (level > currentLogLevel) return;

    const timestamp = new Date().toLocaleString('zh-CN');
    let style;
    let prefix;
    
    switch(level) {
        case LogLevel.ERROR:
            style = 'color: #ff5252; font-weight: bold;';
            prefix = 'ERROR';
            break;
        case LogLevel.WARN:
            style = 'color: #fb8c00; font-weight: bold;';
            prefix = 'WARN';
            break;
        case LogLevel.INFO:
            style = 'color: #2196F3; font-weight: bold;';
            prefix = 'INFO';
            break;
        case LogLevel.DEBUG:
            style = 'color: #757575; font-weight: bold;';
            prefix = 'DEBUG';
            break;
    }

    console.log(`%c[${timestamp}] [${prefix}] [${type}] ${message}`, style);
    if (data && level <= LogLevel.INFO) {
        console.log('%cÊï∞ÊçÆ:', 'color: #4CAF50; font-weight: bold;', data);
    }
}

const sessionId = sessionStorage.getItem('sessionId');
if (!sessionId) {
    chatLog(LogLevel.ERROR, '‰ºöËØù', 'Êú™ÊâæÂà∞‰ºöËØùID');
    window.location.href = '/?error=no_session';
}

const socket = io({
    auth: {
        sessionId: sessionId
    }
});

const username = sessionStorage.getItem('username');
if (!username) {
    chatLog(LogLevel.ERROR, '‰ºöËØù', 'Êú™ÊâæÂà∞Áî®Êà∑Âêç');
    window.location.href = '/?error=no_username';
}

// UIÂÖÉÁ¥†
const messages = document.getElementById('messages');
const form = document.getElementById('form');
const input = document.getElementById('input');
const userList = document.getElementById('userList');
const themeToggle = document.getElementById('themeToggle');
const emojiButton = document.getElementById('emojiButton');
const emojiPicker = document.getElementById('emojiPicker');
const typingIndicator = document.getElementById('typingIndicator');
const userCount = document.getElementById('userCount');

// ‰∏ªÈ¢òÂàáÊç¢ÂäüËÉΩ
let isDarkTheme = localStorage.getItem('theme') === 'dark';

// ÂàùÂßãÂåñ‰∏ªÈ¢ò
if (isDarkTheme) {
    document.body.classList.add('dark-theme');
    themeToggle.textContent = '‚òÄÔ∏è';
}

// ‰∏ªÈ¢òÂàáÊç¢‰∫ã‰ª∂Â§ÑÁêÜ - Âè™Âú®Êú¨Âú∞ÁîüÊïà
themeToggle.addEventListener('click', () => {
    isDarkTheme = !isDarkTheme;
    document.body.classList.toggle('dark-theme');
    themeToggle.textContent = isDarkTheme ? '‚òÄÔ∏è' : 'üåô';
    localStorage.setItem('theme', isDarkTheme ? 'dark' : 'light');
    
    // Êõ¥Êñ∞Ë°®ÊÉÖÈÄâÊã©Âô®‰∏ªÈ¢òÔºàÂ¶ÇÊûúÂ∑≤ÁªèÂàõÂª∫Ôºâ
    if (picker) {
        picker.updateTheme(isDarkTheme ? 'dark' : 'light');
    }
});

// Ë°®ÊÉÖÈÄâÊã©Âô®ÂàùÂßãÂåñ
let picker = null;

function renderEmoji(emoji) {
    input.value += emoji.native;
    input.focus();
    emojiPicker.style.display = 'none';
}

emojiButton.addEventListener('click', () => {
    if (!picker) {
        picker = new EmojiMart.Picker({
            data: emojiData,
            onEmojiSelect: renderEmoji,
            locale: 'zh',
            theme: isDarkTheme ? 'dark' : 'light',
            autoFocus: true,
            showPreview: false,
            showSkinTones: false,
            style: {
                width: '300px'
            }
        });
        emojiPicker.appendChild(picker);
    }
    
    if (emojiPicker.style.display === 'none' || !emojiPicker.style.display) {
        emojiPicker.style.display = 'block';
    } else {
        emojiPicker.style.display = 'none';
    }
});

// ÁÇπÂáªÂÖ∂‰ªñÂú∞ÊñπÂÖ≥Èó≠Ë°®ÊÉÖÈÄâÊã©Âô®
document.addEventListener('click', (e) => {
    if (!emojiPicker.contains(e.target) && e.target !== emojiButton) {
        emojiPicker.style.display = 'none';
    }
});

// Socket‰∫ã‰ª∂Â§ÑÁêÜ
socket.on('connect', () => {
    chatLog(LogLevel.INFO, 'ËøûÊé•', 'Â∑≤ËøûÊé•Âà∞ÊúçÂä°Âô®');
    document.getElementById('status').className = 'connected';
    document.getElementById('status').textContent = 'Â∑≤ËøûÊé•';
    enableInterface();
});

socket.on('connect_error', (error) => {
    chatLog(LogLevel.ERROR, 'ËøûÊé•', error.message);
    if (error.message === 'Êú™ÊéàÊùÉ') {
        sessionStorage.clear();
        window.location.href = '/?error=auth_failed';
    }
    disableInterface();
});

socket.on('disconnect', () => {
    chatLog(LogLevel.WARN, 'ËøûÊé•', '‰∏éÊúçÂä°Âô®Êñ≠ÂºÄËøûÊé•');
    document.getElementById('status').className = 'disconnected';
    document.getElementById('status').textContent = 'Â∑≤Êñ≠ÂºÄ';
    disableInterface();
    showError('ËøûÊé•Êñ≠ÂºÄÔºåÊ≠£Âú®ÈáçËØï...');
});

form.addEventListener('submit', (e) => {
    e.preventDefault();
    const msg = input.value.trim();
    if (msg) {
        socket.emit('chat message', msg);
        input.value = '';
        socket.emit('stop typing', username);
        typingTimeout = null;
    }
});

function enableInterface() {
    chatLog(LogLevel.DEBUG, 'ÁïåÈù¢', 'ÂêØÁî®ËÅäÂ§©ÁïåÈù¢');
    form.classList.remove('disabled');
    input.disabled = false;
    input.placeholder = 'ËæìÂÖ•Ê∂àÊÅØ...';
}

function disableInterface() {
    chatLog(LogLevel.DEBUG, 'ÁïåÈù¢', 'Á¶ÅÁî®ËÅäÂ§©ÁïåÈù¢');
    form.classList.add('disabled');
    input.disabled = true;
    input.placeholder = 'ËøûÊé•‰∏≠...';
}

function showError(message) {
    chatLog(LogLevel.ERROR, 'ÈîôËØØ', message);
    const error = document.createElement('div');
    error.className = 'error-message';
    error.textContent = message;
    document.body.appendChild(error);
    setTimeout(() => error.remove(), 3000);
}

// Ê∂àÊÅØÂ§ÑÁêÜ
socket.on('chat message', (data) => {
    const li = document.createElement('li');
    li.className = data.username === username ? 'message-self' : 'message-others';
    
    const time = new Date().toLocaleTimeString('zh-CN', {
        hour: '2-digit',
        minute: '2-digit'
    });
    
    li.innerHTML = `
        <strong>${data.username}</strong>
        <div class="message-content">${data.message}</div>
        <div class="message-time">${time}</div>
    `;
    
    messages.appendChild(li);
    messages.scrollTop = messages.scrollHeight;
});

// Áî®Êà∑ÂàóË°®Êõ¥Êñ∞
socket.on('userList', (users) => {
    userList.innerHTML = '';
    userCount.textContent = users.length;
    
    users.forEach(user => {
        const li = document.createElement('li');
        li.textContent = user === username ? `${user} (‰Ω†)` : user;
        if (user === username) {
            li.classList.add('current-user');
        }
        userList.appendChild(li);
    });
});

// Ê∑ªÂä†Áî®Êà∑Âä†ÂÖ•Á≥ªÁªüÊ∂àÊÅØ
socket.on('userJoined', (user) => {
    if (user !== username) {
        const li = document.createElement('li');
        li.className = 'system-message';
        li.textContent = `${user} Âä†ÂÖ•‰∫ÜËÅäÂ§©ÂÆ§`;
        messages.appendChild(li);
        messages.scrollTop = messages.scrollHeight;
    }
});

// Ê∑ªÂä†Áî®Êà∑Á¶ªÂºÄÁ≥ªÁªüÊ∂àÊÅØ
socket.on('userLeft', (user) => {
    const li = document.createElement('li');
    li.className = 'system-message';
    li.textContent = `${user} Á¶ªÂºÄ‰∫ÜËÅäÂ§©ÂÆ§`;
    messages.appendChild(li);
    messages.scrollTop = messages.scrollHeight;
});

// Ê∑ªÂä†ÊâìÂ≠óÊåáÁ§∫Âô®ÂäüËÉΩ
let typingTimeout;
input.addEventListener('input', () => {
    if (!typingTimeout) {
        socket.emit('typing', username);
    }
    clearTimeout(typingTimeout);
    typingTimeout = setTimeout(() => {
        socket.emit('stop typing', username);
        typingTimeout = null;
    }, 1000);
});

// ÊòæÁ§∫Áî®Êà∑Ê≠£Âú®ËæìÂÖ•‰ø°ÊÅØ
socket.on('typing', (user) => {
    if (user !== username) {
        typingIndicator.textContent = `${user} Ê≠£Âú®ËæìÂÖ•...`;
        typingIndicator.classList.add('active');
    }
});

socket.on('stop typing', (user) => {
    if (user !== username) {
        typingIndicator.classList.remove('active');
    }
});

socket.on('userJoined', (user) => {
    chatLog(LogLevel.INFO, 'Áî®Êà∑Âä†ÂÖ•', user);
});

socket.on('userLeft', (user) => {
    chatLog(LogLevel.INFO, 'Áî®Êà∑Á¶ªÂºÄ', user);
});

socket.on('muted', () => {
    chatLog(LogLevel.WARN, 'Á¶ÅË®Ä', 'ÊÇ®Â∑≤Ë¢´Á¶ÅË®Ä');
    showError('ÊÇ®Â∑≤Ë¢´Á¶ÅË®ÄÔºåÊó†Ê≥ïÂèëÈÄÅÊ∂àÊÅØ');
});

socket.on('kicked', () => {
    chatLog(LogLevel.ERROR, 'Ë∏¢Âá∫', 'ÊÇ®Â∑≤Ë¢´ÁÆ°ÁêÜÂëòË∏¢Âá∫ËÅäÂ§©ÂÆ§');
    sessionStorage.clear();
    window.location.href = '/?error=kicked';
});
